%TWISTY{
  mode="div"
  showlink="Show Exercise 3: Understanding Electron/Photon Energy Measurements"
  hidelink="Hide Exercise 3: Understanding Electron/Photon Energy Measurements"
  showimgleft="%ICONURLPATH{toggleopen-small}%"
  hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%



---+ Exercise 3: Understanding Electron/Photon Energy Measurements

This exercise will teach you about e/gamma energies estimates in CMS.

---++ Energy Measurements
An electrons energy is measured by the calorimeter while its momentum is measured by the tracker. As electrons have to have at least 4 GeV of energy in CMS, the 0.511 MeV mass of the electron can be safely neglected and we can take the electrons energy to be equal to its momentum. A photon has no track so only its energy can be measured.

Like always, we will focus on the electrons as given they have a track they are the more interesting of the two oobjects.  

---++ ECAL Energy Measurement
As we discussed, individual energy deposits in the calorimeter are summed into clusters of hits (PFClusters) and then those clusters are clustered into SuperClusters to represent the initial electron before undergoing showering. Lets look into some energy measurements

First we will investigate the energy of the resolution of just summing directly the ECAL energy deposits (rec-hits). We will do this first for the seed cluster and the supercluster and compare them to the true energy of the electron (which we know as this is Monte Carlo simulation).

<verbatim>
eleSCRawEn_         .push_back(iEle->superCluster()->rawEnergy());
eleSeedRawEn_.push_back(iEle->superCluster()->seed()->energy());	
</verbatim>

<br />%ICON{led-green}% Question: Plot the ratio of each raw energy to the true or gen energy of the electron. What do you notice about this? How does the supercluster energy compare to the seed cluster energy?

---++ ECAL Energy Corrections

As you have no doubt seen from exercise1, just taking our perfectly calibrated ecal energy deposits and summing them up is not giving the precision we need. 

There are many ways the energy of the electron in the ecal can not end up absorbed in the ECAL. For example, we apply noise cuts on the ECAL rec-hits to enter PF clusters. Anything below that threshold is simply discarded meaning we will recover less of the electrons energy. 

<br>%ICON{led-green}% Question: what other mechanisms lead to an incorrect measurement of energy ?

How we address this is we use a semi-parametric boosted decision tree (BDT) trained on a sample of electrons and photons to estimate 

There are three ecal energy corrections
   * PF ECAL cluster correction: 
      * these are basic corrections which correct a given PF cluster to the response expected if it were a single em particle. Mostly corrects for ECAL rec-hit thresholds. 
      * the refined supercluster's energy the sum of corrected energy of its consistuent PF clusters
   * Mustache super cluster correction:
      * applies to the mustache superclusters. You can safely ignore for now, in analysis you will always work with refined superclusters and this is only mentioned for completeness
   * Electron / Photon correction:
      * applied on top of the refined supercluster energy of the electron/photon. Note, it is not stored in the supercluster itself but as the ecal energy of the electron/photon
      * electrons & photons have seperately trained corrections
      * this is the energy you will use and it represents the best possible correction


We will now look at the corrected energy variables 
<verbatim>
eleSeedCorrEn_      .push_back(iEle->superCluster()->seed()->correctedEnergy());
eleSCEn_            .push_back(iEle->superCluster()->energy());
eleEcalEn_          .push_back(iEle->ecalEnergy()); 
</verbatim>

The first is the seed cluster corrected energy, the second is the supercluster corrected energy (which is the sum of the seed cluster corrected energies) and the final is the fully corrected energy of the supercluster which is known as the electrons ecal energy. Note if this was a photon "ecalEnergy" would just be "energy" 

<br />%ICON{led-green}% Question: plot all these variables (with the raw energy for comparison). What do you notice?

---++ Tracker Momentum Measurements

As, for our purposes, the electron can be assumed as massless, the tracker gives a second measurement of the electrons energy. Lets look at our two momentum measurements, the momentum as measured at the inner most layer of the track (p_in) and the momentum measured at the outer most layer of the tracker (p_out).

<verbatim>
eleGsfTrkPInn_.push_back(iEle->trackMomentumAtVtx().r());
eleGsfTrkPOut_.push_back(iEle->trackMomentumOut().r());
</verbatim>

<br />%ICON{led-green}% Question: now plot these variables, what do you notice? Compare the inner momentum resolution to the ecal energy for  10 <genPt<15 GeV and 30<genPt<50. Which is better for which energy range?


---++ Track-ECAL combination

The tracker and ECAL have complimentary measurements of the electrons energy so we can combine these them to improve the resolution. This is done by doing a standard error weighted combination of the two measurements and then correcting it via a further energy correction similar to what we did for the calorimeter only energy. 

This energy is what is stored as the electrons energy and is accessed by 
<verbatim>
eleEn_              .push_back(iEle->energy());
</verbatim>
It is also equivalent to "p4().E()"

Energy correction flow of e/gamma objects is the following:

<img alt="Screen_Shot_2018-04-16_at_7.42.02_pm.png" height="140" src="%ATTACHURL%/Screen_Shot_2018-04-16_at_7.42.02_pm.png" title="Screen_Shot_2018-04-16_at_7.42.02_pm.png" width="464" />



This is taken from https://twiki.cern.ch/twiki/pub/CMS/SWGuideCMSPhysicsObjectSchoolBARI2017EGamma/CMSPOS2017-Part2.pdf by L. Soffi, presented in CMS physics object school in Bari in 2017.

So as you can see, there are several levels at which corrections are applied. In this exercise, we will not learn all the levels of corrections. We will learn two most important levels of corrections for electrons and photons:
   * Refined Super-Cluster (SC) corrections: Needed to take care of energy lost in gaps, cracks etc
   * Residual data-MC corrections(also performed on refined SCs): Needed for *good* data-MC agreement

To start learning about it, we first need to run the *run_mc2017_94X.py* . Before we run it, let's have a look at the *ggNtuplizer_electrons.cc*. For today's exercise, we access three energy variables:

   * Raw energy: no regression, no data-MC scale corrections
   * Energy post regression, but no data-MC scale corrections
   * Energy post regression AND post data-MC scale corrections

Ways to access the above 3 variables (see in *ggNtuplizer_electrons.cc*) 
Raw energy:
<verbatim>eleSCRawEn_         .push_back(iEle->superCluster()->rawEnergy());</verbatim>

Energy post regression:
<verbatim>eleSCEn_            .push_back(iEle->superCluster()->energy());</verbatim>

Energy post regression AND post data-MC scale corrections:
<verbatim>eleCalibEn_         .push_back(iEle->userFloat("ecalEnergyPostCorr"));</verbatim>

So now we know which variables are important and how to run, let's do the following:

First change the input file to: 
<verbatim>
/store/mc/RunIIFall17MiniAODv2/DYJetsToLL_M-50_TuneCP5_13TeV-amcatnloFXFX-pythia8/MINIAODSIM/PU2017_12Apr2018_94X_mc2017_realistic_v14-v1/10000/0CAD0E35-8B42-E811-99FD-008CFAC91E10.root
</verbatim>

Those who do not have the grid password, can access from here: 
<verbatim>
/eos/cms/store/group/phys_egamma/tnp/0CAD0E35-8B42-E811-99FD-008CFAC91E10.root 
</verbatim>

Now run like this: 
<verbatim>
cmsRun run_mc2017_94X.py
</verbatim>

You will get a root file: *ggtree_mc.root*. 

To analyze the above rootfile, we need to download the following:

   * EGMregression.C

   * EGMregression.h

Take them from here: /afs/cern.ch/user/s/swmukher/public/cmspos19   

(Thanks to Shilpi Jain for preparing these codes).

Run the above like this: 
<verbatim>
root -l -b
.L EGMregression.C
EGMregression t
t.Loop(0)
</verbatim>

You will get a root file named *histo_mc.root*

Let's start checking things one by one.

1 Compare the raw energy with the energy from EGM regression (i.e. before scale and smearing).

<verbatim>
root -l histo_mc.root 
hrawE->SetLineColor(1);
hrawE->SetLineWidth(2);
hrawE->Draw()
hcorrE->SetLineColor(2);
hcorrE->SetLineWidth(2);
hcorrE->Draw("sames");</verbatim>

You will see something like this:

* Raw Energy and Corrected energy (before scale and smearing):  
<img alt="plot_rawEAndCorrE.png" height="475" src="%ATTACHURLPATH%/plot_rawEAndCorrE.png" width="698" />


<br>%ICON{led-green}% Question: What is the level of corrections? Hint: For each event, calculate the ratio of raw energy to the corrected energy and fill in a histogram.

   1 Form the Z mass using two electrons. This is needed to be done using the above 3 definitions of energies. So the task is to compare the masses from the above 3 definitions by plotting on one canvas. histo_mc.root already has these masses formed. Plot the 3 masses as follows:

<verbatim>
root -l histo_mc.root 
hrawM->SetLineColor(1);
hrawM->SetLineWidth(2);
hegmRM->SetLineColor(2);
hegmRM->SetLineWidth(2);
hcalibM->SetLineColor(3);
hcalibM->SetLineWidth(2);
hcalibM->Draw();
hegmRM->Draw("sames");
hrawM->Draw("sames");</verbatim>

You will see something like this:

* Di-electron invariant mass using the 3 definitions of energy: 
<img alt="plot_3Masses.png" height="475" src="%ATTACHURLPATH%/plot_3Masses.png" width="698" />


<br>%ICON{led-green}% Question: Which one is nearer to the Z peak and which one has the best resolution?

NEXT: Repeat the above same exercise for Data as is done for MC.

For this, take the input root file to be:

<verbatim>
Input root file: /store/data/Run2017C/SingleElectron/MINIAOD/31Mar2018-v1/60000/26B0FDF4-B537-E811-824C-44A842CFCA00.root

and run: cmsRun run_data2017_94X.py</verbatim>

The output root file is: ggtree_data.root (or you can copy from here: ~shilpi/public/ggtree_data.root) To analyze the above root file, run

<verbatim>
root -l -b
.L EGMregression.C
EGMregression t
t.Loop(1)</verbatim>

*Note the 1 in the argument of Loop(1)*

To compare the mass histograms in data and MC, you need to do this:
<verbatim>
root -l -b histo_mc.root histo_data.root
hegmRM->SetLineColor(1);
hegmRM->SetLineWidth(2);
hegmRM->Draw();
_file0->cd()
hegmRM->SetLineColor(2);
hegmRM->SetLineWidth(2);
hegmRM->Draw("sames");</verbatim>

%ENDTWISTY%
