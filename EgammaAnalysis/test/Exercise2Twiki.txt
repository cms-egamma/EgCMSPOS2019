%TWISTY{
  mode="div"
  showlink="Show Exercise 2: Electron and Photon Identification"
  hidelink="Hide Exercise 2: Electron and Photon Identification"
  showimgleft="%ICONURLPATH{toggleopen-small}%"
  hideimgleft="%ICONURLPATH{toggleclose-small}%"
}%

---+ Exercise 2: Electron and Photon Identification

The goal of this exercise is to understand how to select E/gamma objects for use in analysis. 
 
Electron and photons objects have minimal identification on them, with what little selection they do have being mostly to save disk space and CPU. Therefore the majority of "electrons" and "photons" reconstructed in the data are actually jets (often refered to as fakes). To remove this background we apply a selection on key quantities which distinqush electrons & photons from hadronic jets

<br>%ICON{led-green}% Question: How does an electron / photon look different to a hadronic jet? What features define an electron and what features define a photon?

Selections are applied on electrons/photons to distingush them from jets. There are two main types, cut based and MVA (multi-variate analysis) based. Cut based simply applies thresholds to a list of variables while an MVA produces a variable from its inputs which is a measure of how electron/photon or jet like an object is. 

---++ Cut based ID

We will use electrons as an example, everything that applies here also applies in general to photons. First a good starting point to learn about cut base identification is to read this twiki [[CutBasedElectronIdentificationRun2][https://twiki.cern.ch/twiki/bin/view/CMS/CutBasedElectronIdentificationRun2]]

Cuts are applied on different shower shape and isolation variables to identify an electron. For example, the following table shows the electron ID cuts for different working points.

<img alt="ElectronID_94Xv2.png" height="466" src="%ATTACHURL%/ElectronID_94Xv2.png" title="ElectronID_94Xv2.png" width="1006" />

---+++ ID variable investigations
Lets look at these variables and plot them. We will do it for real electrons and jets reconstructed as electrons (commonly refered to as fakes as the jet fakes the signature of an electron). The key variables to investigate ar e below:

| *variable*  |  *CMSSW method*  |  *ntuple name*  |  *suggested range barrel*  |  *suggested range endcap*  |
| full5x5_sigmaIetaIeta  |  full5x5_sigmaIetaIeta()  |  eleSigmaIEtaIEtaFull5x5  |  0.0 to 0.02  |  0.0 to 0.05  |
| dEtaInSeed  |  deltaEtaSeedClusterTrackAtVtx()  |  eledEtaSeedAtVtx   |  -0.02 to 0.02  |  -0.02 to 0.02  |
| dPhiIn  |  deltaPhiSuperClusterTrackAtVtx()  |  eledPhiAtVtx  |  -0.1 to 0.1  |  -0.1 to 0.1  |
| H/E  |  hcalOverEcal  |  eleHoverE  |  0.0 to 0.15  |  0.0 to 0.15  |
| charged had isolation   |  pfIsolationVariables().sumChargedHadronPt  |  elePFChIso  |  0 to 20  |  0 to 20  |
| neutral had isolation   |  pfIsolationVariables().sumNeutralHadronPt  |  elePFNeuIso  |  0 to 20  |  0 to 20  |
| photon isolation   |  pfIsolationVariables().sumPhotonHadronPt  |  elePFPhoIso  |  0 to 20  |  0 to 20  |
| E/p_in   |  eSuperClusterOverP()  |  eleEoverP  |  0 to 5  |  0 to 5  |
| expected missing inner hits   |   gsfTrack()->hitPattern()<br>.numberOfAllHits(reco::HitPattern::MISSING_INNER_HITS)  |  eleMissHits  |  0  to 5  |  0 to 5  |
| MVA-Iso*  |  userFloat("ElectronMVAEstimatorRun2Fall17IsoV2Values")  |  eleIDMVAIso |  -1 to 1  |  -1 to  1  |
*okay this isnt a "cut based ID variable" but its interesting to compare it for signal and background. More on this later...


To make life easier, a set of utility functions in the package [[https://github.com/cms-egamma/EgCMSPOS2019/blob/master/EgammaAnalysis/interface/HistFuncs.h][HistFuncs]] are provided. These functions automatise the tedious parrts of comparing histograms. Of interest here is [[https://github.com/cms-egamma/EgCMSPOS2019/blob/master/EgammaAnalysis/interface/HistFuncs.h#L25][compSigBkg]] which compares signal and background for a given variable. We will select signal events by requiring electrons to be matched to a gen electron with pt>10 not from a tau decay. We will select background events by requiring that the electron is not matched to a gen electron. In both cases we will use the same DYToJets MC sample. We have already produced the ntuples for you to save time. We will require that the electron is in the "good" region of the detector which is |eta|<1.4448 || 1.566<|eta|<2.5. We have saved a variable "eleRegion" which is equal to 0 if in the barrel region and 1 if in the endcap region. Finally to make it a fair comparison, we will do it for >30 GeV electrons. 

Here is an example for sigmaIEtaIEta

<verbatim>
root
gSystem->Load("libEgCMSPOS2019EgammaAnalysis.so");
dyTree2018 = HistFuncs::makeChain("ggNtuplizer/EventTree","/eos/cms/store/group/phys_egamma/CMSPOS2019/ntuples/GGNtupV2/MINIAODSIM/DYJetsToLL_M-50_TuneCP5_13TeV-madgraphMLM-pythia8/102X_upgrade2018_realistic_v15-v1_MINIAODSIM_GGNtupV2/190915_203701/0000/DYJetsToLL_M-50_TuneCP5_13TeV-madgraphMLM-pythia8_ntuples_102X_upgrade2018_realistic_v15-v1_GGNtupV2_*.root",10); //the 10 is to use 1/10th of the stats for time reasons, change to 1 to get them all
hist = HistFuncs::compSigBkg(dyTree2018,dyTree2018,100,0,0.02,"eleSigmaIEtaIEtaFull5x5","elePt>30 && eleRegion==0","eleGenPt>10 && eleGenFromTau==0","eleGenPt<=0",true)
</verbatim>

If you wish to save the plots, there is a also a print function
<verbatim>
HistFuncs::print(const std::string& fileName,const std::string& canvasName="c1");
</verbatim> 
which will print fileName+".png" and fileName+".C". It is well worth always printing out plots in ".C" as well incase modifications need to be made later.


*Exercise 2.1*: plot each variable for the barrel and endcap seperately. Can you explain why they look the shape they do for signal and for background?

---+++ Detail ID shower shape discussion

Now we've had a look and got a feel of the various ID variables, lets really focus in on sigmaIEtaIEta full5x5 and really get to grips with sigmaIEtaIEta and what full 5x5 means. First what is sigmaIEtaIEta, its simply the RMS of the showerspread in eta in units of crystals scaled to the average crystal eta width of 0.01745 and 0.0447 of the barrel and endcap. This obfuscates a key feature of sigmaIEta so lets plot raw sigmaIEtaIEtaFull5x5 /  0.0174 (or 0.0447 for endcap).
<verbatim>
histEB = HistFuncs::makeHist(dyTree2018,100,0,1,"eleSigmaIEtaIEtaFull5x5/0.0174","elePt>30 && eleRegion==0 && eleGenPt>10 && eleGenFromTau==0");
histEE = HistFuncs::makeHist(dyTree2018,100,0,1,"eleSigmaIEtaIEtaFull5x5/0.0447","elePt>30 && eleRegion==1 && eleGenPt>10 && eleGenFromTau==0");
histEB->Draw()
histEE->SetLineColor(2)
histEE->Draw("SAME")
</verbatim>
What do you see when plotting the raw sigmaIEtaIEtaFull5x5?


 As we know, PF clustering assigns fractions of a rec-hits energy to nearby clusters under the hypothesis that each local maxima is a single particle. sigmaIEtaIEta is calculated using these fractions. sigmaIEtaiEtaFull5x5 is calculated using the full energy of all the rec-hits in the 5x5, ignoring fractions and those hits not included in a cluster. 

Lets compare sigmaIEtaIEta and sigmaIEtaIEtaFull5x5. For signal:

<verbatim>
hist = HistFuncs::compVars(dyTree2018,100,0,0.02,{"eleSigmaIEtaIEtaFull5x5","eleSigmaIEtaIEta"},"elePt>30 && eleRegion==0 && eleGenPt>10 && eleGenFromTau==0")
</verbatim>

and for background
<verbatim>
hist = HistFuncs::compVars(dyTree2018,100,0,0.02,{"eleSigmaIEtaIEtaFull5x5","eleSigmaIEtaIEta"},"elePt>30 && eleRegion==0 && eleGenPt<=0 && eleGenFromTau==0")
</verbatim>

There is now noticably more background passing sigmaIEtaIEta<0.011 but not much more signal passing. This is because this variable is actively trying to determine if the cluster is a single particle (signal) or two very close by particles (background). By using the fractions, we discard energy contributions from other nearby particles as found by the PF clustering worsenting the variable! Thus in all cases in CMS (with a few minor exceptions) we use the full 5x5 showershapes. 


Finally we use sigmaIEtaIEta but not sigmaIPhiIPhi. You can plot that to see why :)

<verbatim>
hist = HistFuncs::compSigBkg(dyTree2018,dyTree2018,100,0,0.03,"eleSigmaIPhiIPhiFull5x5","elePt>30 && eleRegion==0","eleGenPt>10 && eleGenFromTau==0","eleGenPt<=0",true)
</verbatim>


---+++ Applying the selection

Now lets look how many electrons we have passing the selection. We can apply the selections listed in the above table manually but as you can see this is tedious and error prone. Inside CMSSW we have already calculated the selection results and stored whether an electron passed or failed the selection. This was accessed eariler by <verbatim>electronID("cutBasedElectronID-Fall17-94X-V2-tight")</verbatim>. In our ntuples we compressed this information further into a branch called eleIDbit. Lets have a look at it.

This branch stores the electron ID decision in a 64 bit integer. Each bit represents a decision.<br />For electrons, five different ID decisions are stored: Veto, Loose, Medium, Tight and HEEP. So only 5 bits are important for us, other 59 bits of this integer are not used.<br />We need to represent that integer in 5 bits: b4 b3 b2 b1 b0<br />b0: Veto; b1: Loose; b2: Medium; b3: Tight and b4: HEEP<br />To access the decision for <br />(a) veto: eleIDbit[]&gt;&gt;0&1 ---&gt; gives 0 or 1. if 0--&gt; this eID is failed. if 1--&gt; this eID is passed<br />(b) Loose: eleIDbit[]&gt;&gt;1&1<br />(c) Medium: eleIDbit[]&gt;&gt;2&1<br />(d) Tight: eleIDbit[]&gt;&gt;3&1<br />(e) HEEP: eleIDbit[]&gt;&gt;4&1

Open the code ggNtuplizer_electrons.cc, and search the string 'eleIDbit' to understand how the ID decisions are accessed. For example,


<verbatim>
bool isPassTight = iEle->electronID("cutBasedElectronID-Fall17-94X-V2-tight");
if (isPassTight) setbit(tmpeleIDbit, 3);
</verbatim>

For photons it is done in a similar way. Decisions for three photon IDs are stored in phoIDbit, so 3 bits represent the decision; b2 b1 b0

b0: Loose; b1: Medium; b2: Tight<br />To access the decision for <br />(a) Loose: phoIDbit[]&gt;&gt;0&1 ---&gt; gives 0 or 1. if 0--&gt; this phoID is failed. if 1--&gt; this phoID is passed<br />(b) Medium: phoIDbit[]&gt;&gt;1&1<br />(c) Tight: phoIDbit[]&gt;&gt;2&1

*Exercise 2.3*: Remake the previous plots but this time apply the medium ID. What do you observe?




---+++ Applying Individual Cuts of a Selection

Many times it is useful to add or remove individual cuts of a selection. This could be for side band studies, removing isolation cuts or for studying the efficiency of a single cut or an "N-1" efficiency/distribution where "N-1" means "apply all N selections except the 1 under study".

Our ID framework also provides a mechanism for this, for each ID we save a 32-bit int with the bits corresponding to whether an individual cut passed/failed. 

For the cut based selection (veto, loose, medium, tight) the summary of the bits are:
|  *bit nr*  |  *cut*  |  *decimal*  |  *hexadecimal*  | 
|  0  |MinPtCut  |  1  |  0x1  |
|  1  |GsfEleSCEtaMultiRangeCut  |  2  |  0x2  |
|  2  |GsfEleDEtaInSeedCut  |  4  |  0x4  |
|  3  |GsfEleDPhiInCut  |  8  |  0x8  |
|  4  |GsfEleFull5x5SigmaIEtaIEtaCut  |  16  |  0x10  |
|  5  |GsfEleHadronicOverEMCut  |  32  |  0x20  |
|  6  |GsfEleEInverseMinusPInverseCut  |  64  |  0x40  |
|  7  |GsfEleEffAreaPFIsoCut  |  128  |  0x80  |
|  8  |GsfEleConversionVetoCut  |  256  |  0x100  |
|  9  |GsfEleMissingHitsCut  |  512  |  0x200  |

|  *bit nr*  |  *cut*  |  *decimal*  |  *hexadecimal*  | 
|  0  |MinPtCut  |  1  |  0x1  |
|  1  |GsfEleSCEtaMultiRangeCut  |  2  |  0x2  |
|  2  |GsfEleDEtaInSeedCut  |  4  |  0x4  |
|  3  |GsfEleDPhiInCut  |  8  |  0x8  |
|  4  |GsfEleFull5x5SigmaIEtaIEtaWithSatCut  |  16  |  0x10  |
|  5  |GsfEleFull5x5E2x5OverE5x5WithSatCut  |  32  |  0x20  |
|  6  |GsfEleHadronicOverEMLinearCut  |  64  |  0x40  |
|  7  |GsfEleTrkPtIsoCut  |  128  |  0x80  |
|  8  |GsfEleEmHadD1IsoRhoCut  |  256  |  0x100  |
|  9  |GsfEleDxyCut  |  512  |  0x200  |
|  10  |GsfEleMissingHitsCut  |  1024  |  0x400  |
|  11  |GsfEleEcalDrivenCut  |  2048  |  0x800  |

Here it is most convenient to work in hexadecimal as it makes it easier to add or remove cuts. For example say we wanted to require just the GsfEleFull5x5SigmaIEtaIEtaCut and GsfEleHadronicOverEMCut cuts, we just sum the numbers which is easier in hex, its 0x10+0x20 = 0x30. Adding the missing hits cut, we get 0x230. All cuts is 0x3FF. All cuts except sigmaIEtaIEta is 0x3EF. Of course nothing stops us working in decimal but 0x230 is much more clear to me than 560 to see which bits are set. This will seem to be difficult and confusing at first but trust me, its well worth mastering how to do bit manitipulation like this.

In cmssw this is accessed as <verbatim> userInt("cutBasedElectronID-Fall17-94X-V2-tight")</verbatim> and in our ntuples we stored it as <verbatim>eleIDbits[]</verbatim> with the same order as above. 


Now lets apply the sigmaIEtaIEta cut of the tight ID
<verbatim>
dyTree2018->Draw("eleSigmaIEtaIEtaFull5x5","(eleIDbits[][3]&0x10)!=0 && eleGenPt!=0 && elePt>20","")
</verbatim>
Notice how the eleSigmaIEtaIEtaFull5x5 distribution is truncated at the cut value.

*Exercise 2.3*: on the sigmaIEtaIEta distribution, 
   1. apply a selection of all cuts 
   1. apply a selection of all cuts except sigmaIEtaIEta
   1. apply a selection of all cuts except isolation


---+++ Making a New Selection

Lets make a new cut-based electron ID. From $CMSSW_BASE/src/, do

<verbatim>
git cms-addpkg RecoEgamma/ElectronIdentification
</verbatim>

Cuts are defined in /RecoEgamma/ElectronIdentification/python/Identification/. Go to this directory and open cutBasedElectronID_Fall17_94X_V2_cff.py.  Here you can see the defination of the ID and can see the values of the cuts, for example whar tight ID in endcap, what is the missingHitsCut for the tight ID in the endcap. 

Let's assume we want to design a new WP of ID where missingHitsCut is 0, and let's say we want to call it SuperTight ID.

Make necessary changes in RecoEgamma/ElectronIdentification/python/Identification/cutBasedElectronID_Fall17_94X_V2_cff.py

Just copy and paste the whole block for tight ID, including idName, WP_Tight_EB, WP_Tight_EE, then change tight to supertight where ever necessary, and put missingHitsCut=0 for both barrel and endcap.

Also add this line in proper place:
<verbatim>
cutBasedElectronID_Fall17_94X_V2_supertight = configureVIDCutBasedEleID_V5(WP_SuperTight_EB, WP_SuperTight_EE, isoInputs)
</verbatim>

Then, as instructed in the code, you should comment out the lines about registry and isPOGApproved; then run

calculateIdMD5 cutBasedElectronID_Fall17_94X_V2_cff.py cutBasedElectronID_Fall17_94X_V2_supertight

You will get a number, update the MD5 sum strings and uncomment the lines again. Then compile by doing scram b from $CMSSW/src/

Then you would need to include this new ID to the ntuplizer. For that, open ggNtuplizer_electrons.cc, and make necessary changes.

You need to add the following lines in proper place:
<verbatim>
bool isPassSuperTight = iEle->electronID("cutBasedElectronID-Fall17-94X-V2-supertight");
if (isPassSuperTight) setbit(tmpeleIDbit, 5);
</verbatim>

So, to access the decision of superTight ID, one has to do: eleIDbit[]&gt;&gt;5&1

Compile the code, and run on simulated events as before. Next, we will check the impact of tightenting the missingHit cut. Open the output root file and plot electron pT for tight and superTight electrons on same canvas.

<verbatim>
EventTree ->SetLineColor(kGreen)
EventTree ->Draw("elePt","eleIDbit[]>>3&1") //tight in green
EventTree ->SetLineColor(kBlue)
EventTree ->Draw("elePt","eleIDbit[]>>5&1","sames") //super tight in blue
</verbatim>

<br />%ICON{led-green}% Question: How many electrons passed tight ID, and how many passed super tight ID? Hint: if you drag and move stat-bar, then you will see the number of events of both cases.

---+++ MC measured Efficiencies and Backgrounds 

It is very important to see how ID variables behave vs et/eta/pu when setting cuts. A key way to do this is to look at efficiencies usiing Monte Carlo. Note we prefer to plot vs genPt and supercluster eta when plotting vs et and eta. The gen Pt reason is bin migration. If a 45 GeV electron badly reconstructed and has a reco pt of 35 GeV it will most likely fail the ID. In a Z sample like ours, there are many more 45 GeV electrons than 35 GeV electrons. Therefore when using reco pt, it looks like we're inefficient for 35 GeV when we're really not. Hence we use gen pt to be unbiased w.r.t these effect. Supercluser eta is more straightforward, supercluster eta is w.r.t to 0,0,0 which means a cluster with eta of 1.2 is always in the same place in the detector. Electron eta is w.r.t to the vertex it comes from therefore the same value of electron eta can mean a range of calorimeter eta, thus smearing out any detector effects. 

Now lets plot some efficiencies. An example for H/E:

<verbatim>
root EgammaAnalysis/test/rootSetup.C
dyTree2018 = HistFuncs::makeChain("ggNtuplizer/EventTree","/eos/cms/store/group/phys_egamma/CMSPOS2019/ntuples/GGNtupV2/MINIAODSIM/DYJetsToLL_M-50_TuneCP5_13TeV-madgraphMLM-pythia8/102X_upgrade2018_realistic_v15-v1_MINIAODSIM_GGNtupV2/190915_203701/0000/DYJetsToLL_M-50_TuneCP5_13TeV-madgraphMLM-pythia8_ntuples_102X_upgrade2018_realistic_v15-v1_GGNtupV2_*.root",10); //the 10 is to use 1/10th of the stats for time reasons, change to 1 to get them all
histRel = HistFuncs::makeEffHist(dyTree2018,100,20,60,"eleGenPt","elePt>20 && eleRegion==0 && eleGenPt>10 && eleGenFromTau==0","eleHoverE<0.05") 
histAbs = HistFuncs::makeEffHist(dyTree2018,100,20,60,"eleGenPt","elePt>20 && eleRegion==0 && eleGenPt>10 && eleGenFromTau==0","eleHoverE*eleEcalEn<4") 
histRel->SetLineColor(2);
histRel->Draw();
histAbs->Draw("SAME");
</verbatim>


<br />%ICON{led-green}% Question: What do you notice? Can you do look at other ID variables an put cuts on them?

%ENDTWISTY%

